networks:
  app-tier:
    driver: bridge

volumes:
    postgres_data:
    seq_data:

name: "infrastructure-local"

services:
  s3:
    image: scality/s3server:latest
    container_name: s3
    ports:
      - "59104:8000"
    environment:
      - SCALITY_ACCESS_KEY_ID=EAVI2FY2XO2SKN9D2G9RV4
      - SCALITY_SECRET_ACCESS_KEY=UZyDFX3zDlFomOG4LIqKU8EIaYoSn9MVUo89vfNRCwBNqf7
    tty: true
    networks:
      - app-tier

  postgres:
    container_name: postgres
    image: postgres:14.5
    hostname: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=local-db
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
    networks:
      - app-tier

  pgadmin4:
    depends_on:
      - postgres
    container_name: pgadmin4
    image: dpage/pgadmin4:latest
    hostname: pgadmin4
    restart: unless-stopped
    ports:
      - "54320:80"
    environment:
      - PGADMIN_DEFAULT_PASSWORD=postgres
      - PGADMIN_DEFAULT_EMAIL=postgres@postgres.com
    networks:
      - app-tier

  zookeeper:
    image: bitnami/zookeeper:latest #3.5.8
    container_name: zookeeper
    restart: unless-stopped
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - app-tier

  kafka:
    image: bitnami/kafka:3.0
    restart: unless-stopped
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: INTERNAL://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
      KAFKA_MIN_INSYNC_REPLICAS: 1
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_PORT: 9092
    networks:
      - app-tier

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8092:8080"
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      - kafka
    networks:
      - app-tier

  seq:
    image: datalust/seq:2022.1 # docs: https://docs.datalust.co/docs/an-overview-of-seq
    restart: unless-stopped
    volumes:
      - seq_data:/data
    ports:
      - "5341:5341" # the ingestion only port
      - "8001:80"   # the UI port
    environment:
      - ACCEPT_EULA=Y
    networks:
      - app-tier

  fluent-bit:
    image: fluent/fluent-bit:1.9.8
    restart: unless-stopped
    command: /fluent-bit/bin/fluent-bit -c /fluent-bit.conf
    volumes:
      - ./docker/fluent-bit/fluent-bit.conf:/fluent-bit.conf
      - ./docker/fluent-bit/parsers.conf:/parsers.conf
    ports:
      - "5170:5170"
    depends_on:
      - seq
    networks:
      - app-tier

  jaeger:
    image: jaegertracing/all-in-one:1.41
    restart: unless-stopped
    container_name: jaeger
    ports:
      - "6831:6831/udp" # jaeger agent
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # jaeger UI
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - app-tier

  prometheus:
    image: prom/prometheus:v2.41.0
    restart: unless-stopped
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-tier